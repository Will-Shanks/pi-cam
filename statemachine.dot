digraph {
  o [label="Off", fontcolor=white, style=filled, fillcolor=black]
  script [label="Script Called"]
  d [label="Die", style=filled, fillcolor=grey]

  o->script [label="Powered On"]
  script->r_start [label="New Thread", color=blue]
//  script->s [label="New Thread", color=blue]
//  script->a [label="New Thread", color=blue]

  r_die->d [color=red]
  r_g->d [label="Receive SIG_KILL", color=red]
//  s->d [label="Receive SIG_KILL", color=red]
//  s_d->d [color=red]

/*  subgraph cluster_a {
    label="Remote Control API"
    a [label="Listening for port 8001 TCP connection"]
    a_c [label="Read Request"]

    a->a_c [label="Connection Made"]
  }
*/
  subgraph cluster_r {
    label="Recorder"
    subgraph cluster_r_a {
      label="API"
      r_g_fps [label="Get REC_FPS", shape=box]
      r_s_fps [label="Set REC_FPS", shape=box]
      r_g_qual [label="Get REC_RES", shape=box]
      r_s_qual [label="Set REC_RES", shape=box]
      r_start [label="Start", shape=box]
      r_stop [label="Stop", shape=box]
    }
    subgraph cluster_r_g {
      label="Free Space Monitor"
      r_g [label="", shape=point]
      r_g_d [label="Delete oldest recording"]
      r_g_s [label="Sleep REC_SEC_PER_RECORDING/2"]
    
      r_g->r_g_d [label="<MIN_FREE_SPACE"]
      r_g->r_g_s [label=">MIN_FREE_SPACE"]
      r_g_s->r_g
      r_g_d->r_g
    }
    r [label="Record and Saving Video"]
    r_update [label="Set REC_UP=True"]
    r_close_file [label="Close Recording File"]
    r_new_file [label="Open New Recording File"]
    r_restart [label="Restart Recording"]
    r_die [label="Stop Recording, Close Recording File"]
    
    r_start->r_g [label="New Thread", color=blue]
    r_start->r_new_file
    r_stop->r [label="SIG_KILL", color=red]
    r->r_die [label="Recieved SIG_KILL", color=red]
    r_stop->r_g [label="SIG_KILL", color=red]
    r->r_close_file [label="time % SEC_PER_RECORDING == 0"]
    r_close_file->r_new_file [label="REC_UP=False"]
    r_new_file->r
    r_close_file->r_restart [label="REC_UP=True"]
    r_restart->r_new_file
    r_s_fps->r_update
    r_update->r_s_fps
    r_s_qual->r_update
    r_update->r_s_qual
  }

/*
  subgraph cluster_s {
    label="Streamer"
    subgraph cluster_s_a {
      label="API"
      s_g_fps [label="Return STREAMING_FPS", shape=box]
      s_s_fps [label="Set STREAMING_FPS", shape=box]
      s_g_qual [label="Return STRAMING_RES", shape=box]
      s_s_qual [label="Set STREAMING_RES", shape=box]
      s_kill [label="Stop", shape=box]
      s_start [label="Start", shape=box]
    }
    s [label="Listening For port 8000 UDP connection"]
    s_s [label="Record and Stream over Connection"]
    s_update [label="Set STREAM_UP=TRUE"]
    s_restart [label="Restart Stream"]
    s_d [label="Clean up Connection"]

    s_kill->s [label="SIG_KILL", color=red]
    s_kill->s_s [label="SIG_KILL", color=red]
    s_s->s_d [label="Receive SIG_KILL", color=red]
    s->s_s [label="Connection Made"]
    s_s->s_d [label="Connection Terminated"]
    s_d->s
    s_s_fps->s_update
    s_update->s_s_fps
    s_s_qual->s_update
    s_update->s_s_qual
    s_s->s_restart [label="STREAM_UP=TRUE"]
    s_restart->s_s
  }
*/
}
